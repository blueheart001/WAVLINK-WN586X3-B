From 472e77e6edb548addfe9b1f71e307223e892b2a3 Mon Sep 17 00:00:00 2001
From: Felix Fietkau <nbd@nbd.name>
Date: Sat, 26 Apr 2025 21:10:40 +0200
Subject: [PATCH] debloat: disable common USB quirks

Signed-off-by: Felix Fietkau <nbd@nbd.name>
---
 drivers/usb/host/pci-quirks.c | 9 +++++++++
 drivers/usb/host/pci-quirks.h | 6 +++++-
 2 files changed, 14 insertions(+), 1 deletion(-)

--- a/drivers/usb/host/pci-quirks.c
+++ b/drivers/usb/host/pci-quirks.c
@@ -130,6 +130,8 @@ struct amd_chipset_type {
 	u8 rev;
 };
 
+#ifndef CONFIG_PCI_DISABLE_COMMON_QUIRKS
+
 static struct amd_chipset_info {
 	struct pci_dev	*nb_dev;
 	struct pci_dev	*smbus_dev;
@@ -590,6 +592,9 @@ bool usb_amd_pt_check_port(struct device
 EXPORT_SYMBOL_GPL(usb_amd_pt_check_port);
 #endif /* CONFIG_USB_PCI_AMD */
 
+#endif /* CONFIG_PCI_DISABLE_COMMON_QUIRKS */
+
+#if defined(CONFIG_USB_PCI) && !defined(CONFIG_PCI_DISABLE_COMMON_QUIRKS)
 static int usb_asmedia_wait_write(struct pci_dev *pdev)
 {
 	unsigned long retry_count;
@@ -633,6 +638,7 @@ void usb_asmedia_modifyflowcontrol(struc
 	pci_write_config_byte(pdev, ASMT_CONTROL_REG, ASMT_CONTROL_WRITE_BIT);
 }
 EXPORT_SYMBOL_GPL(usb_asmedia_modifyflowcontrol);
+#endif /* CONFIG_USB_PCI */
 
 static inline int io_type_enabled(struct pci_dev *pdev, unsigned int mask)
 {
@@ -724,6 +730,10 @@ reset_needed:
 	return 1;
 }
 EXPORT_SYMBOL_GPL(uhci_check_and_reset_hc);
+#endif
+
+#ifndef CONFIG_PCI_DISABLE_COMMON_QUIRKS
+#if defined(CONFIG_HAS_IOPORT) && IS_ENABLED(CONFIG_USB_UHCI_HCD)
 
 #define pio_enabled(dev) io_type_enabled(dev, PCI_COMMAND_IO)
 
@@ -1037,6 +1047,7 @@ static int handshake(void __iomem *ptr,
 					 delay_usec, wait_usec);
 }
 
+#if defined(CONFIG_USB_PCI) && !defined(CONFIG_PCI_DISABLE_COMMON_QUIRKS)
 /*
  * Intel's Panther Point chipset has two host controllers (EHCI and xHCI) that
  * share some number of ports.  These ports can be switched between either
@@ -1146,6 +1157,7 @@ void usb_disable_xhci_ports(struct pci_d
 	pci_write_config_dword(xhci_pdev, USB_INTEL_XUSB2PR, 0x0);
 }
 EXPORT_SYMBOL_GPL(usb_disable_xhci_ports);
+#endif /* CONFIG_USB_PCI */
 
 /*
  * PCI Quirks for xHCI.
@@ -1304,3 +1316,4 @@ static void quirk_usb_early_handoff(stru
 }
 DECLARE_PCI_FIXUP_CLASS_FINAL(PCI_ANY_ID, PCI_ANY_ID,
 			PCI_CLASS_SERIAL_USB, 8, quirk_usb_early_handoff);
+#endif
--- a/drivers/usb/host/pci-quirks.h
+++ b/drivers/usb/host/pci-quirks.h
@@ -2,7 +2,7 @@
 #ifndef __LINUX_USB_PCI_QUIRKS_H
 #define __LINUX_USB_PCI_QUIRKS_H
 
-#ifdef CONFIG_USB_PCI_AMD
+#if defined(CONFIG_USB_PCI_AMD) && !defined(CONFIG_PCI_DISABLE_COMMON_QUIRKS)
 int usb_hcd_amd_remote_wakeup_quirk(struct pci_dev *pdev);
 bool usb_amd_hang_symptom_quirk(void);
 bool usb_amd_prefetch_quirk(void);
@@ -38,12 +38,16 @@ static inline bool usb_amd_pt_check_port
 #ifdef CONFIG_USB_PCI
 void uhci_reset_hc(struct pci_dev *pdev, unsigned long base);
 int uhci_check_and_reset_hc(struct pci_dev *pdev, unsigned long base);
+#endif
+
+#if defined(CONFIG_USB_PCI) && !defined(CONFIG_PCI_DISABLE_COMMON_QUIRKS)
 void usb_asmedia_modifyflowcontrol(struct pci_dev *pdev);
 void usb_enable_intel_xhci_ports(struct pci_dev *xhci_pdev);
 void usb_disable_xhci_ports(struct pci_dev *xhci_pdev);
 #else
 struct pci_dev;
 static inline void usb_asmedia_modifyflowcontrol(struct pci_dev *pdev) {}
+static inline void usb_enable_intel_xhci_ports(struct pci_dev *xhci_pdev) {}
 static inline void usb_disable_xhci_ports(struct pci_dev *xhci_pdev) {}
 #endif  /* CONFIG_USB_PCI */
 
