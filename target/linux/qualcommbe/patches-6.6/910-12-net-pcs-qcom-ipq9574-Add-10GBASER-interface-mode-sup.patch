From 15dde2ac70202fe6b5738844cef5aa836c80ee0a Mon Sep 17 00:00:00 2001
From: Lei Wei <quic_leiwei@quicinc.com>
Date: Wed, 6 Mar 2024 17:40:52 +0800
Subject: [PATCH 12/44] net: pcs: qcom-ipq9574: Add 10GBASER interface mode
 support

10GBASER mode is used when PCS connects with a 10G SFP module.

Change-Id: Ifc3c3bb23811807a9b34e88771aab2c830c2327c
Signed-off-by: Lei Wei <quic_leiwei@quicinc.com>
---
 drivers/net/pcs/pcs-qcom-ipq9574.c | 44 ++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/drivers/net/pcs/pcs-qcom-ipq9574.c b/drivers/net/pcs/pcs-qcom-ipq9574.c
index f11fb21a1..92fa6f26f 100644
--- a/drivers/net/pcs/pcs-qcom-ipq9574.c
+++ b/drivers/net/pcs/pcs-qcom-ipq9574.c
@@ -61,6 +61,9 @@
 					 FIELD_PREP(GENMASK(9, 2), \
 					 FIELD_GET(XPCS_INDIRECT_ADDR_L, reg)))
 
+#define XPCS_KR_STS			0x30020
+#define XPCS_KR_LINK_STS		BIT(12)
+
 #define XPCS_DIG_CTRL			0x38000
 #define XPCS_USXG_ADPT_RESET		BIT(10)
 #define XPCS_USXG_EN			BIT(9)
@@ -224,6 +227,28 @@ static void ipq_pcs_get_state_usxgmii(struct ipq_pcs *qpcs,
 	state->duplex = DUPLEX_FULL;
 }
 
+static void ipq_pcs_get_state_10gbaser(struct ipq_pcs *qpcs,
+				       struct phylink_link_state *state)
+{
+	unsigned int val;
+	int ret;
+
+	ret = regmap_read(qpcs->regmap, XPCS_KR_STS, &val);
+	if (ret) {
+		state->link = 0;
+		return;
+	}
+
+	state->link = !!(val & XPCS_KR_LINK_STS);
+
+	if (!state->link)
+		return;
+
+	state->speed = SPEED_10000;
+	state->duplex = DUPLEX_FULL;
+	state->pause |= MLO_PAUSE_TXRX_MASK;
+}
+
 static int ipq_pcs_config_mode(struct ipq_pcs *qpcs,
 			       phy_interface_t interface)
 {
@@ -251,6 +276,7 @@ static int ipq_pcs_config_mode(struct ipq_pcs *qpcs,
 		rate = 312500000;
 		break;
 	case PHY_INTERFACE_MODE_USXGMII:
+	case PHY_INTERFACE_MODE_10GBASER:
 		val = PCS_MODE_XPCS;
 		rate = 312500000;
 		break;
@@ -356,6 +382,15 @@ static int ipq_pcs_config_usxgmii(struct ipq_pcs *qpcs)
 	return regmap_set_bits(qpcs->regmap, XPCS_MII_CTRL, XPCS_MII_AN_EN);
 }
 
+static int ipq_pcs_config_10gbaser(struct ipq_pcs *qpcs)
+{
+	/* Configure 10GBASER mode if required */
+	if (qpcs->interface == PHY_INTERFACE_MODE_10GBASER)
+		return 0;
+
+	return ipq_pcs_config_mode(qpcs, PHY_INTERFACE_MODE_10GBASER);
+}
+
 static int ipq_pcs_link_up_config_sgmii(struct ipq_pcs *qpcs,
 					int index,
 					unsigned int neg_mode,
@@ -532,6 +567,9 @@ static void ipq_pcs_get_state(struct phylink_pcs *pcs,
 	case PHY_INTERFACE_MODE_USXGMII:
 		ipq_pcs_get_state_usxgmii(qpcs, state);
 		break;
+	case PHY_INTERFACE_MODE_10GBASER:
+		ipq_pcs_get_state_10gbaser(qpcs, state);
+		break;
 	default:
 		break;
 	}
@@ -563,6 +601,8 @@ static int ipq_pcs_config(struct phylink_pcs *pcs,
 		return ipq_pcs_config_2500basex(qpcs);
 	case PHY_INTERFACE_MODE_USXGMII:
 		return ipq_pcs_config_usxgmii(qpcs);
+	case PHY_INTERFACE_MODE_10GBASER:
+		return ipq_pcs_config_10gbaser(qpcs);
 	default:
 		return -EOPNOTSUPP;
 	};
@@ -596,6 +636,9 @@ static void ipq_pcs_link_up(struct phylink_pcs *pcs,
 	case PHY_INTERFACE_MODE_USXGMII:
 		ret = ipq_pcs_link_up_config_usxgmii(qpcs, speed);
 		break;
+	case PHY_INTERFACE_MODE_10GBASER:
+		/* Nothing to do here */
+		return;
 	default:
 		return;
 	}
@@ -677,6 +720,7 @@ static unsigned long ipq_pcs_clk_rate_get(struct ipq_pcs *qpcs)
 	switch (qpcs->interface) {
 	case PHY_INTERFACE_MODE_2500BASEX:
 	case PHY_INTERFACE_MODE_USXGMII:
+	case PHY_INTERFACE_MODE_10GBASER:
 		return 312500000;
 	default:
 		return 125000000;
-- 
2.34.1

