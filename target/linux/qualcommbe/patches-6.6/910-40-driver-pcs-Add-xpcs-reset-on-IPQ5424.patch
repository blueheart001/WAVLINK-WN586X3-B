From 891b319badf06c026bd1ad6b253eec401411d1c6 Mon Sep 17 00:00:00 2001
From: Luo Jie <quic_luoj@quicinc.com>
Date: Tue, 25 Mar 2025 15:19:23 +0800
Subject: [PATCH 40/44] driver: pcs: Add xpcs reset on IPQ5424

Signed-off-by: Luo Jie <quic_luoj@quicinc.com>
---
 arch/arm64/boot/dts/qcom/ipq5424.dtsi |  3 +++
 drivers/net/pcs/pcs-qcom-ipq9574.c    | 16 ++++++++++++++++
 2 files changed, 19 insertions(+)

diff --git a/arch/arm64/boot/dts/qcom/ipq5424.dtsi b/arch/arm64/boot/dts/qcom/ipq5424.dtsi
index a4f085737..f3f60e68a 100644
--- a/arch/arm64/boot/dts/qcom/ipq5424.dtsi
+++ b/arch/arm64/boot/dts/qcom/ipq5424.dtsi
@@ -525,6 +525,7 @@ pcs0: ethernet-pcs@7a00000 {
 				 <&gcc GCC_UNIPHY0_AHB_CLK>;
 			clock-names = "sys",
 				      "ahb";
+			resets = <&gcc GCC_UNIPHY0_XPCS_ARES>;
 			#clock-cells = <1>;
 			status = "disabled";
 
@@ -543,6 +544,7 @@ pcs1: ethernet-pcs@7a10000 {
 				 <&gcc GCC_UNIPHY1_AHB_CLK>;
 			clock-names = "sys",
 				      "ahb";
+			resets = <&gcc GCC_UNIPHY1_XPCS_ARES>;
 			#clock-cells = <1>;
 			status = "disabled";
 
@@ -561,6 +563,7 @@ pcs2: ethernet-pcs@7a20000 {
 				 <&gcc GCC_UNIPHY2_AHB_CLK>;
 			clock-names = "sys",
 				      "ahb";
+			resets = <&gcc GCC_UNIPHY2_XPCS_ARES>;
 			#clock-cells = <1>;
 			status = "disabled";
 
diff --git a/drivers/net/pcs/pcs-qcom-ipq9574.c b/drivers/net/pcs/pcs-qcom-ipq9574.c
index 649e6d3a8..3076791cd 100644
--- a/drivers/net/pcs/pcs-qcom-ipq9574.c
+++ b/drivers/net/pcs/pcs-qcom-ipq9574.c
@@ -13,6 +13,7 @@
 #include <linux/phylink.h>
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
+#include <linux/reset.h>
 
 #include <dt-bindings/net/qcom,ipq9574-pcs.h>
 
@@ -139,6 +140,7 @@ struct ipq_pcs {
 	struct clk_hw tx_hw;
 
 	struct ipq_pcs_mii *qpcs_mii[PCS_MAX_MII_NRS];
+	struct reset_control *xpcs_rstc;
 };
 
 #define phylink_pcs_to_qpcs_mii(_pcs)	\
@@ -277,8 +279,12 @@ static int ipq_pcs_config_mode(struct ipq_pcs *qpcs,
 {
 	unsigned long rate = 125000000;
 	unsigned int val, mask;
+	bool xpcs_mode = false;
 	int ret;
 
+	/* Assert XPCS reset */
+	reset_control_assert(qpcs->xpcs_rstc);
+
 	/* Configure PCS interface mode */
 	mask = PCS_MODE_SEL_MASK;
 	switch (interface) {
@@ -303,6 +309,7 @@ static int ipq_pcs_config_mode(struct ipq_pcs *qpcs,
 	case PHY_INTERFACE_MODE_10GBASER:
 		val = PCS_MODE_XPCS;
 		rate = 312500000;
+		xpcs_mode = true;
 		break;
 	default:
 		return -EOPNOTSUPP;
@@ -355,6 +362,10 @@ static int ipq_pcs_config_mode(struct ipq_pcs *qpcs,
 		return ret;
 	}
 
+	/* Deassert XPCS */
+	if (xpcs_mode)
+		reset_control_deassert(qpcs->xpcs_rstc);
+
 	return 0;
 }
 
@@ -968,6 +979,11 @@ static int ipq9574_pcs_probe(struct platform_device *pdev)
 		return dev_err_probe(dev, PTR_ERR(clk),
 				     "Failed to enable AHB clock\n");
 
+	qpcs->xpcs_rstc = devm_reset_control_get_optional(dev, NULL);
+	if (IS_ERR_OR_NULL(qpcs->xpcs_rstc))
+		return dev_err_probe(dev, PTR_ERR(qpcs->xpcs_rstc),
+				     "Failed to get XPCS reset\n");
+
 	ret = ipq_pcs_clk_register(qpcs);
 	if (ret)
 		return ret;
-- 
2.34.1

